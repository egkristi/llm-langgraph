"""
Utility for extracting and managing code blocks from agent messages.
This module helps identify code blocks in agent responses and 
automatically stores them in the workspace for use by the Code Runner agent.
"""

import re
from typing import List, Dict, Any, Optional, Tuple
from pathlib import Path
import os
import time

from utils.workspace_manager import save_file, get_workspace_path

def extract_code_blocks(message: str) -> List[Dict[str, str]]:
    """
    Extract all code blocks from a message.
    
    Args:
        message: The message text to extract code from
        
    Returns:
        List of dictionaries containing language and code content
    """
    # Pattern to match code blocks with language specification
    # This captures ```language\ncode``` format
    pattern = r"```([a-zA-Z0-9_+#]+)?\s*\n([\s\S]*?)\n```"
    
    # Find all code blocks
    matches = re.findall(pattern, message)
    
    # Process and return the matches
    code_blocks = []
    for language, code in matches:
        # Normalize language name
        language = language.lower().strip() if language else "text"
        
        # Map common language aliases
        language_map = {
            "py": "python",
            "js": "javascript",
            "ts": "typescript",
            "rb": "ruby",
            "sh": "bash",
            "shell": "bash",
            "cpp": "c++",
            "cc": "c++",
            "csharp": "cs",
            "golang": "go"
        }
        
        normalized_language = language_map.get(language, language)
        
        code_blocks.append({
            "language": normalized_language,
            "code": code.strip()
        })
    
    return code_blocks

def save_code_blocks_to_workspace(
    code_blocks: List[Dict[str, str]], 
    group_chat_name: str,
    agent_name: str
) -> List[Dict[str, str]]:
    """
    Save extracted code blocks to the workspace in markdown format with metadata.
    
    Args:
        code_blocks: List of code blocks with language and content
        group_chat_name: Name of the group chat
        agent_name: Name of the agent who provided the code
        
    Returns:
        List of saved file information (path, language, etc.)
    """
    saved_files = []
    
    for i, block in enumerate(code_blocks):
        language = block["language"]
        code = block["code"]
        
        # Skip empty code blocks
        if not code.strip():
            continue
            
        # Generate file extension based on language
        extension_map = {
            "python": "py",
            "javascript": "js",
            "typescript": "ts",
            "html": "html",
            "css": "css",
            "ruby": "rb",
            "go": "go",
            "java": "java",
            "c": "c",
            "c++": "cpp",
            "cs": "cs",
            "php": "php",
            "rust": "rs",
            "swift": "swift",
            "kotlin": "kt",
            "scala": "scala",
            "bash": "sh",
            "sql": "sql",
            "json": "json",
            "yaml": "yml",
            "markdown": "md",
            "text": "txt"
        }
        
        # Get the appropriate extension or default to txt
        extension = extension_map.get(language, "txt")
        
        # Generate a unique filename based on agent, timestamp and index
        timestamp = int(time.time())
        timestamp_readable = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(timestamp))
        code_filename = f"code_{timestamp}_{i+1}.{extension}"
        md_filename = f"{agent_name}_{timestamp}_{i+1}.md"
        
        # Create markdown content with metadata and explanation
        markdown_content = f"""# Code Snippet: {code_filename}

## Metadata
- **Author**: {agent_name}
- **Created**: {timestamp_readable}
- **Language**: {language}
- **Group Chat**: {group_chat_name}

## Description
This code was generated by the {agent_name} agent in the {group_chat_name} group chat.

## Code
```{language}
{code}
```

## Usage
This file can be executed by the Code Runner agent using:
```
run_code(file_name="{code_filename}", language="{language}")
```
"""
        
        # Save the markdown file to the workspace
        try:
            # First save the actual code file with correct extension
            code_file_path = save_file(group_chat_name, code, code_filename, "code")
            
            # Then save the markdown documentation
            md_file_path = save_file(group_chat_name, markdown_content, md_filename, "code")
            
            saved_files.append({
                "path": code_file_path,
                "md_path": md_file_path,
                "filename": code_filename,
                "md_filename": md_filename,
                "language": language,
                "agent": agent_name,
                "timestamp": timestamp
            })
            
        except Exception as e:
            print(f"Error saving code block to workspace: {str(e)}")
    
    return saved_files

def generate_execution_suggestion(saved_files: List[Dict[str, str]]) -> str:
    """
    Generate a suggestion for the Code Runner to execute saved files.
    
    Args:
        saved_files: List of saved file information
        
    Returns:
        Suggestion text for code execution
    """
    if not saved_files:
        return ""
    
    # Create a suggestion based on the saved files
    suggestion = "**Code Runner Execution Suggestion:**\n\n"
    suggestion += "The following code files have been saved to the workspace and can be executed:\n\n"
    
    for file in saved_files:
        code_filename = file["filename"]
        md_filename = file["md_filename"]
        language = file["language"]
        
        # Add suggestion with documentation reference
        suggestion += f"* **{code_filename}** ({language}) - [Documentation: {md_filename}]\n"
        
        if language == "python":
            suggestion += f"  ```\n  run_code(file_name=\"{code_filename}\", language=\"python\")\n  ```\n\n"
        elif language == "javascript":
            suggestion += f"  ```\n  run_code(file_name=\"{code_filename}\", language=\"javascript\")\n  ```\n\n"
        elif language == "go":
            suggestion += f"  ```\n  run_code(file_name=\"{code_filename}\", language=\"go\")\n  ```\n\n"
        else:
            suggestion += f"  ```\n  run_code(file_name=\"{code_filename}\", language=\"{language}\")\n  ```\n\n"
    
    # Add note about workspace files
    suggestion += "\nYou can view all workspace files in the 'Workspace Files' section of the sidebar.\n"
    suggestion += "To list files programmatically, use: `list_workspace_files(group_chat_name=\"<chat_name>\", subfolder=\"code\")`\n"
    
    return suggestion
